/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import cs4262.Client;
import cs4262.Node;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.ConcurrentHashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Buddhi
 */
public class ClientFrame extends javax.swing.JFrame {

    private int k; //number of buckets
    private int myBucketId;
    private String status; //whether node is intializing or up
    private String ip;
    private int port;
    private String userName; //hash(ip+port)
    private Map<Integer, Node> bucketTable; //bucket and the node I know from that bucket
    private Map<String, ArrayList<String>> fileDictionary; //filename: nodelist
    private ArrayList<String> myFileList; //filenames with me
    private ArrayList<Node> myNodeList; //nodes in my bucket
    private Timestamp timestamp;
    private DatagramSocket datagramSocket;
    private DefaultTableModel filesTableModel;
    private DefaultTableModel nodesTableModel;
    DefaultListModel<String> filesListModel;
    DefaultListModel<String> searchFilesResultListModel;
    private String currentSearch;
    private ArrayList<String> mySearchResult;

    /**
     * Creates new form ClientFrame
     */
    public ClientFrame() {
        initComponents();
    }

    ClientFrame(int k, int myBucketId, String ip, int port, String username, Map<String, ArrayList<String>> fileDictionary, ArrayList<String> myFileList, DatagramSocket datagramSocket) {
        initComponents();

        this.k = k; // get from main
        this.myBucketId = myBucketId;
        this.status = "0";
        this.ip = ip;
        this.port = port;
        this.userName = username;
        this.bucketTable = new ConcurrentHashMap<>();
        this.fileDictionary = fileDictionary;
        this.myFileList = myFileList;
        this.myNodeList = new ArrayList<>();
        this.timestamp = new Timestamp(System.currentTimeMillis());
        this.datagramSocket = datagramSocket;
        mySearchResult = new ArrayList<>();

        this.myNodeList.add(new Node(this.ip, this.port));
//        this.bucketTable.put(this.myBucketId, new Node(this.ip, this.port));

        filesTableModel = new DefaultTableModel(new String[]{"File Name", "Nodes List"}, 0);
        filesTable.setModel(filesTableModel);

//        String[] bucketColumnList = new String[k];
//        for (int i = 0; i < k; i++) {
//            bucketColumnList[k] = "Bucket " + k;
//        }
        nodesTableModel = new DefaultTableModel(new String[]{"Bucket ID", "Nodes List"}, 0);
        nodesTable.setModel(nodesTableModel);

        //set node properties
        ipLabel.setText(ip);
        portLabel.setText(port + "");
        usernameLabel.setText(username);

        System.out.println("bucketID: " + myBucketId);

        bucketIDLabel.setText(myBucketId + "");

        filesListModel = new DefaultListModel<>();
        fileList.setModel(filesListModel);
        for (String string : myFileList) {
            filesListModel.addElement(string);
        }

        searchFilesResultListModel = new DefaultListModel<>();
        searchFilesResultList.setModel(searchFilesResultListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ipLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        bucketIDLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        filenameText = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        commandLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchFilesResultList = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        filesTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        nodesTable = new javax.swing.JTable();
        exitButton = new javax.swing.JButton();
        leaveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        jLabel8.setText("File Name:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Node Properties"));

        jLabel1.setText("IP:");

        jLabel2.setText("Port:");

        jLabel3.setText("Username: ");

        ipLabel.setText(" ");

        portLabel.setText(" ");

        usernameLabel.setText(" ");

        jScrollPane2.setViewportView(fileList);

        jLabel6.setText("Bucket ID:");

        bucketIDLabel.setText(" ");

        jLabel7.setText("Files List:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ipLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(portLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bucketIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(portLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(usernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(bucketIDLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));

        jLabel5.setText("File Name:");

        filenameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filenameTextActionPerformed(evt);
            }
        });
        filenameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filenameTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filenameTextKeyTyped(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        commandLabel.setText(" ");

        jScrollPane1.setViewportView(searchFilesResultList);

        jLabel9.setText("Results:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(commandLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(filenameText))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(filenameText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commandLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Network Properties"));

        filesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name", "Nodes List"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(filesTable);

        jLabel4.setText("Files in Bucket");

        jLabel10.setText("Nodes in Network");

        nodesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(nodesTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane3)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane4)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        leaveButton.setText("Leave");
        leaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(leaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        String filename = filenameText.getText();

        if (!filename.isEmpty()) {
            String searchString = "SEARCH_FILES " + filename;
            this.currentSearch = filename;

            try {
                System.out.println("Initialize Search for: " + searchString);

                searchFilesResultListModel.removeAllElements();

                initializeSearch(searchString);
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void filenameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filenameTextActionPerformed
        searchButtonActionPerformed(evt);
    }//GEN-LAST:event_filenameTextActionPerformed

    private void filenameTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filenameTextKeyTyped

    }//GEN-LAST:event_filenameTextKeyTyped

    private void filenameTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filenameTextKeyReleased
        if (!filenameText.getText().isEmpty()) {
            commandLabel.setText("SEARCH_FILES " + filenameText.getText());
        } else {
            commandLabel.setText(" ");
        }
    }//GEN-LAST:event_filenameTextKeyReleased

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed

        int res = JOptionPane.showConfirmDialog(this, "Exit the Application?", "Confirm", JOptionPane.YES_NO_OPTION);

        if (res == JOptionPane.YES_OPTION) {
            System.exit(0);
        }

    }//GEN-LAST:event_exitButtonActionPerformed

    public int getK() {
        return k;
    }

    public void setK(int k) {
        this.k = k;
    }

    public int getMyBucketId() {
        return myBucketId;
    }

    public void setMyBucketId(int myBucketId) {
        this.myBucketId = myBucketId;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public Map<Integer, Node> getBucketTable() {
        return bucketTable;
    }

    public void setBucketTable(Map<Integer, Node> bucketTable) {
        this.bucketTable = bucketTable;
    }

    public Map<String, ArrayList<String>> getFileDictionary() {
        return fileDictionary;
    }

    public void setFileDictionary(Map<String, ArrayList<String>> fileDictionary) {
        this.fileDictionary = fileDictionary;
    }

    public ArrayList<String> getMyFileList() {
        return myFileList;
    }

    public void setMyFileList(ArrayList<String> myFileList) {
        this.myFileList = myFileList;
    }

    public ArrayList<Node> getMyNodeList() {
        return myNodeList;
    }

    public void setMyNodeList(ArrayList<Node> myNodeList) {
        this.myNodeList = myNodeList;
    }

    public Timestamp getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Timestamp timestamp) {
        this.timestamp = timestamp;
    }

    public DatagramSocket getDatagramSocket() {
        return datagramSocket;
    }

    public void setDatagramSocket(DatagramSocket datagramSocket) {
        this.datagramSocket = datagramSocket;
    }

    private void leaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveButtonActionPerformed

        int res = JOptionPane.showConfirmDialog(this, "Leave the Bootstrap Server?", "Confirm", JOptionPane.YES_NO_OPTION);

        if (res == JOptionPane.YES_OPTION) {
            String message = "LEAVE " + this.getIp() + " " + this.getPort();
            message = String.format("%04d", message.length() + 5) + " " + message;

            try {
                DatagramPacket dp = new DatagramPacket(message.getBytes(), message.getBytes().length, InetAddress.getByName(this.ip), 55555);
                this.datagramSocket.send(dp);
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_leaveButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed

        refreshDataInClient();
//        System.out.println("Size: " + this.myNodeList.size());
//        for (int i = 0; i < this.myNodeList.size(); i++) {
//            System.out.println(this.myNodeList.get(i).getIp() + ":" + this.myNodeList.get(i).getPort() + " ");
//        }

    }//GEN-LAST:event_refreshButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }

    private void storeNode(String ip, String port) throws IOException {
        Node newNode = new Node(ip, Integer.parseInt(port));
        int bucketId = Math.abs((ip + ":" + port).hashCode()) % k;
        bucketTable.put(bucketId, newNode);
        if (bucketId == this.myBucketId) {
            // request myNodeList from that node 
            this.findMyNodeListFromNode(newNode);
        }
    }

    // handles REGOK responses from BS
    // length REGOK no_nodes IP_1 port_1 IP_2 port_2
    public void handleRegisterResponse(String msg) throws IOException {
        String[] arr = msg.split(" ");

        // validate msg
        if (!arr[1].equals("REGOK")) {
            return;
        }

        this.setVisible(true);
        switch (arr[2]) {
            case "0":
                System.out.println("You are the first node, registered successfully with BS!");
                this.displayRoutingTable();
                this.status = "1";
                break;
            case "1":
                storeNode(arr[3], arr[4]);
                this.displayRoutingTable();
                this.status = "1";
                break;
            case "2":
                storeNode(arr[3], arr[4]);
                storeNode(arr[5], arr[6]);

                // complete bucketTable (including my own bucket if it's empty)
                for (int i = 0; i < k; i++) {
                    if (!bucketTable.containsKey(i)) {
                        findNodeFromBucket(i);
                    }
                }
                // time out to complete receiving replies for findNodeFromBucket
                try {
                    Thread.sleep(8000);  // Tune this

                } catch (InterruptedException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }

//                if (!bucketTable.containsKey(this.myBucketId)) { // if I'm only the node in my bucket no need to wait for myNodeList to populate
//                    System.out.println("I'm the only node in my bucket");
////                    this.displayRoutingTable();
////                    this.status = "1";
//                } else if (this.myNodeList.size() == 1) { // if haven't receive a node in same bucket and haven't called findMyNodeListFromNode inside storeNode method
//                    // request myNodeList from bucketTable.get(this.myBucketId)
//                    this.findMyNodeListFromNode(this.bucketTable.get(this.myBucketId));
//                }
////                System.out.println("###################");
////                this.displayRoutingTable();
////                this.status = "1";
                break;
            case "9999":
//                System.out.println("failed, there is some error in the command");
                JOptionPane.showMessageDialog(this, "Failed, there is some error in the command", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
                break;
            case "9998":
//                System.out.println("failed, already registered! attempting unregister first");
                JOptionPane.showMessageDialog(this, "Failed, already registered! attempting unregister first", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
                break;
            case "9997":
//                System.out.println("failed, registered to another user, try a different IP and port");
                JOptionPane.showMessageDialog(this, "Failed, registered to another user, try a different IP and port", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
                // TODO
                break;
            case "9996":
//                System.out.println("failed, can't register. BS full.");
                JOptionPane.showMessageDialog(this, "Failed, can't register. BS is full", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            default:
                break;
        }
    }

    public void findMyNodeListFromNode(Node node) throws UnknownHostException, IOException {

        //FNL: Find Node List
        String message = "FNL" + " " + this.ip + ":" + Integer.toString(this.port);
        message = String.format("%04d", message.length() + 5) + " " + message;
        unicast(message, node);
    }

    // indicate that I'm new to net
    // send file list with this
    private void connectWithNodes() throws UnknownHostException, IOException {
        // make fileDictionary string
        String FD = ";";
        for (String key : fileDictionary.keySet()) {
            ArrayList<String> nodesList = fileDictionary.get(key);
            FD += key + "=";
            for (int i = 0; i < nodesList.size(); i++) {
                FD += nodesList.get(i) + ",";
            }
            FD += "|";
        }

        // make bucketTable string
        String BL = ";";
        for (Integer key : bucketTable.keySet()) {
            Node bucketNode = bucketTable.get(key);
            BL += key + "=" + bucketNode.getIp() + ":" + bucketNode.getPort() + "|";
        }

        String message = "CWN " + this.ip + ":" + Integer.toString(this.port) + FD + " " + BL;
        message = String.format("%04d", message.length() + 5) + " " + message;

        multicast(message, myNodeList);
    }

    public void HandleConnectWithNodes(String message) {
//        System.out.println(message);
        String[] arr = message.split("\\;");
        String[] split_msg = arr[0].split(" ");
        String[] nodeDetails = split_msg[2].split("\\:");
        String[] bucketList = arr[2].split("\\|");

        // save node in myNodeList
        Boolean isAlreadyInMyNodeList = false;
        for (int j = 0; j < myNodeList.size(); j++) {
            if (myNodeList.get(j).getIp().equals(nodeDetails[0]) && myNodeList.get(j).getPort() == Integer.valueOf(nodeDetails[1])) {
                isAlreadyInMyNodeList = true;
            }
        }
        if (!isAlreadyInMyNodeList) {
            Node nodeInList = new Node(nodeDetails[0], Integer.valueOf(nodeDetails[1]));
            this.myNodeList.add(nodeInList);
        }

        // update bucket table
        for (int i = 0; i < bucketList.length; i++) {
            if (bucketList[i].length() < 2) {
                continue;
            }
            String[] a1 = bucketList[i].split("\\=");
            String bucketNo = a1[0];
            if (a1.length < 1) {
                continue;
            };
            String[] bNode = a1[1].split("\\:");
            bucketTable.put(Integer.valueOf(bucketNo), new Node(bNode[0], Integer.valueOf(bNode[1])));
        }

        // update MyFileDictionary
        String fileList = arr[1];
//        System.out.println("File List *************** " + fileList);

        // save files to fileDicationary
        String[] records = fileList.split("\\|");
        for (int i = 0; i < records.length; i++) {
            if (records[i].length() < 2) {
                continue;
            }
            String[] a1 = records[i].split("\\=");
            String fileName = a1[0];
            if (a1.length < 1) {
                continue;
            };
            String[] nodes = a1[1].split("\\,");

            ArrayList<String> nodesContainingFile = this.fileDictionary.get(fileName);
            if (nodesContainingFile == null) {
                nodesContainingFile = new ArrayList<>();
            }
            for (int j = 0; j < nodes.length; j++) {
                if (nodes.length < 1) {
                    continue;
                }
                if (!nodesContainingFile.contains(nodes[j])) {
                    nodesContainingFile.add(nodes[j]);
                }
            }
            this.fileDictionary.put(fileName, nodesContainingFile);
        }

        // display filedic
        refreshDataInClient();
        this.displayRoutingTable();

    }

    public void handleHeartBeatResponse(String message) {
        //length HEARTBEATOK IP_address port_no
        boolean is_Change = false;
        ArrayList<Node> temNodeList = new ArrayList<Node>();
        String[] splitMessage = message.split(" ");
        String ip = splitMessage[2];
        int port = Integer.parseInt(splitMessage[3]);
        for (Node node : myNodeList) {
            if (node.getIp().equals(ip) && node.getPort() == port) {
                node.setTimeStamp(new Timestamp(System.currentTimeMillis()).getTime());
                is_Change = true;
            }
            temNodeList.add(node);
        }
        this.myNodeList = temNodeList;

        if (!is_Change) {
            for (int key : bucketTable.keySet()) {
                Node node = bucketTable.get(key);
                if (node.getIp().equals(ip) && node.getPort() == port) {
                    node.setTimeStamp(new Timestamp(System.currentTimeMillis()).getTime());
                    bucketTable.replace(key, node);
                }
            }
        }
//        refreshDataInClient();
    }

    public void sendHeartBeatReply(String message) throws IOException {
        String newMessage = "HEARTBEATOK " + this.getIp() + " " + this.getPort();
        newMessage = String.format("%04d", newMessage.length() + 5) + " " + newMessage;
        String[] splitMessage = message.split(" ");
        String userName= splitMessage[2]+":"+splitMessage[3];
        int bucketId = userName.hashCode()%k;
        Node node = new Node(splitMessage[2], Integer.parseInt(splitMessage[3]));
        
        boolean containsKey = bucketTable.containsKey(bucketId);
        if(containsKey==false){
            bucketTable.put(bucketId, node);
        }
        
        unicast(newMessage, node);
    }

    public void findNodeFromBucketReply(int bucketId, Node fromNode) throws UnknownHostException, IOException {
        //FBMOK: Find Bucket Member OK
        if (fromNode.getIp().equals(this.ip) && fromNode.getPort() == this.port) {
//            System.out.println("Ignoring msg");
            return;
        }
//        System.out.println("Finding NOde !!!!");
        Node nodeFromBucket = null;
        String message = null;
        if (bucketTable.get(bucketId) != null) {
//            System.out.println("Node found" + bucketTable.get(bucketId).getPort());
            nodeFromBucket = bucketTable.get(bucketId);
            message = "FBMOK " + bucketId + " " + nodeFromBucket.getIp() + " " + nodeFromBucket.getPort();
        } else {
//            System.out.println("Node not found!");
            message = "FBMOK " + bucketId + " null null";
        }
        message = String.format("%04d", message.length() + 5) + " " + message;
//        System.out.println(fromNode.getIp() + fromNode.getPort());
        unicast(message, fromNode);
    }

    public void receiveReplyFindNodeFromBucket(String message) throws UnknownHostException, IOException {
        String[] split_msg = message.split(" ");
        if ("null".equals(split_msg[3])) {
            return;
        }
        Node bucket_node = new Node(split_msg[3], Integer.valueOf(split_msg[4]));
        this.bucketTable.put(Integer.valueOf(split_msg[2]), bucket_node);
        // Node is still initializing and the returned node is a node from my bucket
        if (split_msg[2].equals(Integer.toString(this.myBucketId))) {
            // request myNodeList from that node
            this.findMyNodeListFromNode(bucket_node);
        }

        this.displayRoutingTable();
    }

    public void unicast(String message, Node node) throws SocketException, UnknownHostException, IOException {
        byte[] buffer = message.getBytes();
        InetAddress receiverAddress = InetAddress.getByName(node.getIp());
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length, receiverAddress, node.getPort());
        this.datagramSocket.send(packet);
    }

    public void multicast(String message, ArrayList<Node> nodesList) throws SocketException, UnknownHostException, IOException {
        for (Node node : nodesList) {
            byte[] buffer = message.getBytes();
            InetAddress receiverAddress = InetAddress.getByName(node.getIp());
            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, receiverAddress, node.getPort());
            this.datagramSocket.send(packet);
        }
    }

    public synchronized void updateRountingTable() throws IOException {
        ArrayList<Node> temNodeList = new ArrayList<>();
//        System.out.println("start");
        for (Node node : myNodeList) {
            if (new Timestamp(System.currentTimeMillis()).getTime() - node.getTimeStamp() < 10000) {
                temNodeList.add(node);
            } else {
//                System.out.println("remove one"+ node.getIp()+" "+node.getPort());
                for (String file : fileDictionary.keySet()) {
//                    System.out.println("change file dictonary");
                    ArrayList<String> temFileNodeList = new ArrayList<String>();
                    for (String username : fileDictionary.get(file)) {
                        String[] split = username.split(":");
                        String ip = split[0];
                        int port = Integer.parseInt(split[1]);
                        if (ip != node.getIp() && port != node.getPort()) {
                            temFileNodeList.add(username);
//                            System.out.println("removed files"+username);
                        }
                    }
                    fileDictionary.replace(file, temFileNodeList);
                }

            }
        }

//        System.out.println("myNodeList " + myNodeList.size());
//        System.out.println("myTemList " + temNodeList.size());
        this.myNodeList = temNodeList;
        for (int key : bucketTable.keySet()) {
            Node neighbour = bucketTable.get(key);
//            System.out.println("time now" + new Timestamp(System.currentTimeMillis()).getTime());
//            System.out.println("neighour time :" + neighbour.getTimeStamp());
//            System.out.println("time to response in bucket table " + (new Timestamp(System.currentTimeMillis()).getTime() - neighbour.getTimeStamp()));
            if (new Timestamp(System.currentTimeMillis()).getTime() - neighbour.getTimeStamp() > 10000) {
//            System.out.println("time to response in bucket table " + (timestamp.getTime() - neighbour.getTimeStamp()));
//            System.out.println("before remove" + bucketTable.keySet());
              bucketTable.remove(key);
//            System.out.println("after remove" + bucketTable.keySet());
              this.findNodeFromBucket(key);
            }

        }
        // if my bucket table does not have connect ti some bucket we need to update that
        Set<Integer> keySet = bucketTable.keySet();
        for (int i = 0; i < this.k; i++) {
            if (!keySet.contains(i) && i != this.myBucketId) {
                this.findNodeFromBucket(i);
            }
        }
//        displayRoutingTable();
//        refreshDataInClient();

    }

    public void findNodeFromBucket(int bucketId) throws UnknownHostException, IOException {
        //FBM: Find Bucket Member 0011 FBM 01
        String message = "FBM " + bucketId + " " + this.ip + ":" + Integer.toString(this.port);
        message = String.format("%04d", message.length() + 5) + " " + message;

        // request from available my nodes
        multicast(message, myNodeList);

        // request from nodes from other buckets
        for (int i = 0; i < k; i++) {
            if (this.bucketTable.containsKey(i) && i != this.myBucketId) {
                unicast(message, this.bucketTable.get(i));
            }
        }
    }

    public void initializeSearch(String msg) throws IOException {
        //SEARCH_FILES file_name
        int begin_index = msg.split(" ")[0].length()+1;
        String file_name= msg.substring(begin_index);
        file_name=file_name.replace(' ', '_');
        String result_string = "";
        mySearchResult.clear();

        //length SEROK no_files IP port hops filename1 filename2 ... ...
//        ArrayList<String> results = new ArrayList<String>();
//        Pattern p = Pattern.compile(".*\\\\b" + file_name + "\\\\b.*");
//        Set<String> keys = fileDictionary.keySet();
//        Iterator<String> iterator = keys.iterator();
//
//        while (iterator.hasNext()) {
//            String candidate = iterator.next();
//            Matcher m = p.matcher(candidate);
//            if (m.matches()) {
//                results.add(candidate);
//                result_string.concat(candidate + " ");
//            }
//        }
//        System.out.println(result_string);
        String net_message = "SER " + this.getIp() + " " + this.getPort() + " " + file_name + " 0";
        net_message = String.format("%04d", net_message.length() + 5) + " " + net_message;
        searchFiles(net_message);
    }

    public void searchFiles(String message) throws UnknownHostException, IOException {
        //length SER IP port file_name hops
        String[] split = message.split(" ");
        String file_name = split[4];
        System.out.println("searching file name: " + file_name);
        String result_string = "";
        String source_ip = split[2];
        int source_port = Integer.parseInt(split[3]);

        int hop_count = 0;
        if (split.length == 6) {
            hop_count = Integer.valueOf(split[5]);
        }
        if(hop_count > 10){
            System.out.println("Max Hop count reached, stopping the search");
            return;
        }

        //length SEROK tofind no_files IP port hops filename1 filename2 ... ...
        ArrayList<String> results = new ArrayList<String>();
       String real_file_name= file_name.replace('_', ' ');
        Pattern p = Pattern.compile("[a-zA-Z\\s]*" + real_file_name + "[a-zA-Z\\s]*",Pattern.CASE_INSENSITIVE);

        Set<String> keys = new HashSet<>(myFileList);
        Iterator<String> iterator = keys.iterator();

        ArrayList<String> nodes = new ArrayList<>();
        ArrayList<Node> nodelist = new ArrayList<>();

        //search in my files list
        while (iterator.hasNext()) {
            String candidate = iterator.next();
            Matcher m = p.matcher(candidate);
            if (m.matches()) {
                results.add(candidate);
//                System.out.println(candidate);
                result_string = result_string.concat(candidate + ",");
            }
        }
        if (results.size() > 0) {
            System.out.println("in if");
            
            String ret_message = "SEROK " + file_name + " " + results.size() + " " + this.getIp() + " " + this.getPort() + " " + (hop_count++) + " " + result_string;
            ret_message = String.format("%04d", ret_message.length() + 5) + " " + ret_message;
//            System.out.println(ret_message);
            unicast(ret_message, new Node(source_ip, source_port));
        } else {

            System.out.println("in else");
            
            keys = fileDictionary.keySet();
            iterator = keys.iterator();

            boolean found = false;

            System.out.println("before iterator");
            
            for (String key : keys) {
                System.out.println(key);
            }
            
            while (iterator.hasNext()) {
                System.out.println("a");
                
                String candidate = iterator.next();
                System.out.println("Candidate: " + candidate);
                Matcher m = p.matcher(candidate);
                if (m.matches()) {
                    System.out.println("b");
                    nodes = fileDictionary.get(candidate);                   
                    for (String node : nodes) {
                        nodelist.add(new Node(node.split(":")[0], Integer.parseInt(node.split(":")[1])));
                    }
                    for (Node node : nodelist) {
                        System.out.println(node.getIp()+":"+node.getPort());
                        
                    }
                    
                    for (int i = 0; i < nodelist.size(); i++) {
                        if(nodelist.get(i).getIp().equals(this.ip) && nodelist.get(i).getPort()==this.port){
                            nodelist.remove(i);
                        }
                    }
                    //need to send search ok. not multicast
                    
                    //message to spread
                    String net_message = "SER " + source_ip + " " + source_port + " " + file_name + " "+(++hop_count);
                    net_message = String.format("%04d", net_message.length() + 5) + " " + net_message;
        
                    multicast(net_message, nodelist);
                    found = true;
                }
            }

            if (!found) {
                Collection<Node> values = bucketTable.values();
                ArrayList<Node> temValues= new ArrayList<>();
                
                Iterator<Node> setIterator = values.iterator();
                while (setIterator.hasNext()){
                    Node next = setIterator.next();
                    if (!(next.getIp().equals(this.ip) && next.getPort()== this.port)) {
                       
                        System.out.println("Adding NODE ######### "+ this.port + " " + next.getPort());
                        temValues.add(next);
                    }
                }
//                values.remove(new Node(this.ip,this.port));
                //message to spread
                String net_message = "SER " + source_ip + " " + source_port + " " + file_name + " "+(++hop_count);
                net_message = String.format("%04d", net_message.length() + 5) + " " + net_message;
                multicast(net_message, temValues);
            }
        }
    }

    // handle leave ok from bootrap server
    public void handleLeaveOk(String message) throws UnknownHostException, IOException {
        System.out.println("Leave Ok Received");
        int messageType = Integer.parseInt(message.split(" ")[2]);
        if (messageType == 0) {
            String sendMeessage = "LEAVE " + this.getIp() + " " + this.getPort();
            message = String.format("%04d", sendMeessage.length() + 5) + " " + sendMeessage;
            multicast(sendMeessage, myNodeList);

            System.exit(0);
        } else if (messageType == 9999) {
//            System.out.println("error while adding new node to routing table");
        }
    }

    public void handleLeave(String message) throws UnknownHostException, IOException {
        System.out.println("call leave");
        String[] splitMesseageList = message.split(" ");
        String ip = splitMesseageList[2];
        int port = Integer.parseInt(splitMesseageList[3]);
        // leave wena eka nodelist eken ain karan ona eke ekek nm.
        ArrayList<Node> tem = new ArrayList<>();
        for (Node node : myNodeList) {
            if (!node.getIp().equals(ip) && node.getPort() != port) {
                tem.add(node);
            } else {
                for (String file : fileDictionary.keySet()) {
                    ArrayList<String> temFileNodeList = new ArrayList<String>();
                    for (String username : fileDictionary.get(file)) {
                        String[] split = username.split(":");
                        String temIp = split[0];
                        int temPort = Integer.parseInt(split[1]);
                        if (temIp != ip && temPort != port) {
                            temFileNodeList.add(username);
                        }
                    }
                    fileDictionary.replace(file, temFileNodeList);
                }
            }
        }
        
        
        for (int key : bucketTable.keySet()) {
            Node neighbour = bucketTable.get(key);
            if (neighbour.getIp() == ip && neighbour.getPort() == port) {
                bucketTable.remove(key);
                this.findNodeFromBucket(key);
            }
        }
    }

    public void findMyNodeListFromNodeReply(Node fromNode) throws UnknownHostException, IOException {
        String message = "FNLOK ";

        // make myNodeList string
        for (int i = 0; i < this.myNodeList.size(); i++) {
            message += this.myNodeList.get(i).getIp() + ":" + Integer.toString(this.myNodeList.get(i).getPort()) + " ";
        }

        // make fileDictionary string
        String FD = ";";
        for (String key : fileDictionary.keySet()) {
            ArrayList<String> nodesList = fileDictionary.get(key);
            FD += key + "=";
            for (int i = 0; i < nodesList.size(); i++) {
                FD += nodesList.get(i) + ",";
            }
            FD += "|";
        }

        message += FD;

        message = String.format("%04d", message.length() + 5) + " " + message;
        unicast(message, fromNode);

        // add that new node to myNodeList
        Boolean isAlreadyInMyNodeList = false;
        // ignore if it's already in myNodeList
        for (int j = 0; j < myNodeList.size(); j++) {
            if (myNodeList.get(j).getIp().equals(fromNode.getIp()) && myNodeList.get(j).getPort() == fromNode.getPort()) {
                isAlreadyInMyNodeList = true;
            }
        }
        if (!isAlreadyInMyNodeList) {
            this.myNodeList.add(fromNode);
        }

//        this.displayRoutingTable();

    }

    public void receiveReplyfindMyNodeListFromNode(String message) throws UnknownHostException, IOException {
//        System.out.println(message);
        String[] arr = message.split("\\;");
//        System.out.println(arr[0]);
        String[] split_msg = arr[0].split(" ");
        int numOfNodes = split_msg.length - 2;

        String fileList = arr[1];
//        System.out.println("File LIst *************** " + fileList);

        // save files to fileDicationary
        String[] records = fileList.split("\\|");
        for (int i = 0; i < records.length; i++) {
            if (records[i].length() < 2) {
                continue;
            }
            String[] a1 = records[i].split("\\=");
            String fileName = a1[0];
            if (a1.length < 2) {
                continue;
            }
            String[] nodes = a1[1].split("\\,");

            ArrayList<String> nodesContainingFile = this.fileDictionary.get(fileName);
            if (nodesContainingFile == null) {
                nodesContainingFile = new ArrayList<>();
            }
            for (int j = 0; j < nodes.length; j++) {
                if (nodes.length < 1) {
                    continue;
                }
                if (!nodesContainingFile.contains(nodes[j])) {
                    nodesContainingFile.add(nodes[j]);
                }

            }
            this.fileDictionary.put(fileName, nodesContainingFile);
        }

        // display filedic
        for (String key : fileDictionary.keySet()) {
//            System.out.println(key);
            ArrayList<String> get = fileDictionary.get(key);
            for (String string : get) {
//                System.out.print(string + " ");
//                System.out.println("");
            }
        }
        for (int i = 0; i < numOfNodes; i++) {
            String[] nodeDetails = split_msg[i + 2].split("\\:");
//            System.out.println(nodeDetails[0]);

            Boolean isAlreadyInMyNodeList = false;
            // ignore if it's already in myNodeList
            for (int j = 0; j < myNodeList.size(); j++) {
                if (myNodeList.get(j).getIp().equals(nodeDetails[0]) && myNodeList.get(j).getPort() == Integer.valueOf(nodeDetails[1])) {
                    isAlreadyInMyNodeList = true;
                }
            }
            if (!isAlreadyInMyNodeList) {
                Node nodeInList = new Node(nodeDetails[0], Integer.valueOf(nodeDetails[1]));
                this.myNodeList.add(nodeInList);
            }
        }

        // send myfile list to all the nodes in myNodeList
        connectWithNodes();

        refreshDataInClient();
//        this.displayRoutingTable();
        this.status = "1";
    }

    public void displayRoutingTable() {
        if (myNodeList.isEmpty() && bucketTable.isEmpty()) {
//            System.out.println("Tables are empty");
        } else {
//            System.out.println("Nodes list in the Bucket:");
            for (Node node : myNodeList) {
//                System.out.println("\t" + node.getIp() + ":" + node.getPort());
            }

//            System.out.println("Nodes list from other Buckets:");
            Iterator entries = bucketTable.entrySet().iterator();
            while (entries.hasNext()) {
                Map.Entry entry = (Map.Entry) entries.next();
                Integer key = (Integer) entry.getKey();
                Node node = (Node) entry.getValue();
//                System.out.println("Bucket " + key + " : " + node.getIp() + ":" + node.getPort());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bucketIDLabel;
    private javax.swing.JLabel commandLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JList<String> fileList;
    private javax.swing.JTextField filenameText;
    private javax.swing.JTable filesTable;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton leaveButton;
    private javax.swing.JTable nodesTable;
    private javax.swing.JLabel portLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JList<String> searchFilesResultList;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    public void handleSearchFilesResponse(String message) {
        //0056 SEROK American 1 10.10.13.152 3 1 American Pickers  
        
        // Ignore late results..
        System.out.println(message);
        String[] SR = message.split(" ");
        String MS = "";
        for (int i=1; i<6; i++){
            MS += SR[i] + " ";
        }
        System.out.println(MS);
        if(mySearchResult.contains(MS)){
            return;
        }else{
            mySearchResult.add(MS);
        }

        String[] split = message.split(" ", 4);

        String filename = split[2];

        if (this.currentSearch.equals(filename)) {

            split = split[3].split(" ", 2);
            int resultCount = Integer.parseInt(split[0]);

            split = split[1].split(" ", 4);
            String ip = split[0];
            String port = split[1];
            String hops= split[2];

            String fileSet = split[3];
            String[] split1 = fileSet.split(",");

            for (String string : split1) {
                searchFilesResultListModel.addElement(string + " - " + ip + ":" + port+" ("+hops+")");
            }
        }
    }
   

    private void refreshDataInClient() {
        this.filesTableModel.setRowCount(0);


        for (Map.Entry<String, ArrayList<String>> entry : fileDictionary.entrySet()) {
            String filename = entry.getKey();
            ArrayList<String> nodes = entry.getValue();

            String nodesList = "";
            for (String node : nodes) {
                nodesList += (node + " ");
            }
            Object row[] = {filename, nodesList};
            this.filesTableModel.addRow(row);
        }

        this.nodesTableModel.setRowCount(0);

        String[] rowData = new String[]{"Bucket " + this.myBucketId, ""};
        for (int i = 0; i < this.myNodeList.size(); i++) {
            rowData[1] += (this.myNodeList.get(i).getIp() + ":" + this.myNodeList.get(i).getPort() + " ");
        }
        nodesTableModel.addRow(rowData);

        for (int key : this.bucketTable.keySet()) {
            if(key != this.myBucketId){               
            Node get = this.bucketTable.get(key);
            nodesTableModel.addRow(new String[]{"Bucket " + key, (this.bucketTable.get(key).getIp() + ":" + this.bucketTable.get(key).getPort())});
            }
        }
    }
}
